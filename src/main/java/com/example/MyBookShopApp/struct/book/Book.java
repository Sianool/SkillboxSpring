package com.example.MyBookShopApp.struct.book;


import com.example.MyBookShopApp.struct.Author;
import com.example.MyBookShopApp.struct.book.file.BookFileEntity;
import com.example.MyBookShopApp.struct.book.links.Book2TagEntity;
import com.example.MyBookShopApp.struct.book.links.Book2UserEntity;
import com.example.MyBookShopApp.struct.book.review.BookRatingEntity;
import com.example.MyBookShopApp.struct.book.review.BookReviewEntity;
import com.example.MyBookShopApp.struct.genre.GenreEntity;
import com.example.MyBookShopApp.struct.genre.TagEntity;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.hibernate.annotations.Formula;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;


@Entity
@Table(name = "books")
@ApiModel(description = "entity representing a book")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    private Integer id;

    @Column(name = "pub_date")
    @ApiModelProperty("date of book publication")
    @JsonProperty("pubDate")
    private LocalDate pubDate;

    @ManyToOne
    @JoinColumn(name = "author_id", referencedColumnName = "id")
    @JsonProperty("author")
    @JsonIgnore
    private Author author;

    @OneToOne
    @JoinTable(name = "book2genre",
            joinColumns = @JoinColumn(name = "book_id", nullable = false),
            inverseJoinColumns = @JoinColumn(name = "genre_id", nullable = false))
    @ApiModelProperty("book genres")
    @JsonIgnore
    private GenreEntity genres;

    @OneToOne
    @JoinTable(name = "book2tag",
            joinColumns = @JoinColumn(name = "book_id", nullable = false),
            inverseJoinColumns = @JoinColumn(name = "tag_id", nullable = false))
    @ApiModelProperty("book tags")
    @JsonIgnore
    private TagEntity tags;

    @OneToMany(mappedBy = "book")
    @ApiModelProperty("book users")
    @JsonIgnore
    private List<Book2UserEntity> book2User;

    @OneToMany(mappedBy = "book")
    @ApiModelProperty("book files")
    @JsonIgnore
    private List<BookFileEntity> bookFileEntities = new ArrayList<>();

    @OneToMany(mappedBy = "book")
    @ApiModelProperty("book rating entities")
    @JsonIgnore
    private List<BookRatingEntity> bookRatingEntities;

    @Column(name = "is_bestseller")
    @ApiModelProperty("if isBestseller = 1 so the book is considered to be bestseller and if 0 " +
            "the book is not a bestseller")
    private Integer isBestseller;

    @ApiModelProperty("mnemonical identity sequence of characters")
    private String slug;
    @ApiModelProperty("book title")
    private String title;
    @ApiModelProperty("book url")
    private String image;

    @Column(columnDefinition = "TEXT")
    @ApiModelProperty("book description text")
    private String description;

    @Column(name = "price")
    @JsonProperty("price")
    @ApiModelProperty("book price without discount")
    private Integer priceOld;

    @Column(name = "discount")
    @JsonProperty("discount")
    @ApiModelProperty("discount value for book")
    private Double discount;

    @Formula("(SELECT count(bu.id) FROM book2user bu join book2user_type but on bu.type_id=but.id WHERE bu.book_id = id AND but.code='PAID') + " +
            "((SELECT count(bu.id) FROM book2user bu join book2user_type but on bu.type_id=but.id WHERE bu.book_id = id AND but.code='CART') * 0.7) +" +
            "((SELECT count(bu.id) FROM book2user bu join book2user_type but on bu.type_id=but.id WHERE bu.book_id = id AND but.code='KEPT') * 0.4)")
    private Double bookPopularity;

    @Formula("(COALESCE((SELECT ROUND(avg(br.rating)) FROM book_rating br WHERE br.book_id = id), 0))")
    @JsonProperty("rating")
    private Integer bookRating;
    
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public LocalDate getPubDate() {
        return pubDate;
    }

    public void setPubDate(LocalDate pubDate) {
        this.pubDate = pubDate;
    }

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }

    public Integer getIsBestseller() {
        return isBestseller;
    }

    public void setIsBestseller(Integer isBestSeller) {
        this.isBestseller = isBestSeller;
    }

    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getPriceOld() {
        return priceOld;
    }

    public void setPriceOld(Integer priceOld) {
        this.priceOld = priceOld;
    }

    public Double getDiscount() {
        return discount;
    }

    public void setDiscount(Double price) {
        this.discount = price;
    }

    public GenreEntity getGenres() {
        return genres;
    }

    public void setGenres(GenreEntity genres) {
        this.genres = genres;
    }

    public TagEntity getTags() {
        return tags;
    }

    public void setTags(TagEntity tags) {
        this.tags = tags;
    }

    public Integer getBookRating() {
        return bookRating;
    }

    public void setBookRating(Integer bookRating) {
        this.bookRating = bookRating;
    }

    public List<Book2UserEntity> getBook2User() {
        return book2User;
    }

    public void setBook2User(List<Book2UserEntity> book2User) {
        this.book2User = book2User;
    }

    public Double getBookPopularity() {
        return bookPopularity;
    }

    public void setBookPopularity(Double bookPopularity) {
        this.bookPopularity = bookPopularity;
    }

    public List<BookFileEntity> getBookFileEntities() {
        return bookFileEntities;
    }

    public void setBookFileEntities(List<BookFileEntity> bookFileEntities) {
        this.bookFileEntities = bookFileEntities;
    }

    public List<BookRatingEntity> getBookRatingEntities() {
        return bookRatingEntities;
    }

    public void setBookRatingEntities(List<BookRatingEntity> bookRatingEntities) {
        this.bookRatingEntities = bookRatingEntities;
    }

    public Integer getRatingCount(Integer rating) {
        int result = 0;
        for (BookRatingEntity ratingEntity : getBookRatingEntities()) {
            if (ratingEntity.getRating() == rating) result++;
        }
        return result;
    }

    @JsonProperty("discountPrice")
    public Integer getDiscountedPrice() {
        return Math.toIntExact(Math.round(priceOld - priceOld * discount));
    }

    @JsonProperty("percentDiscount")
    public Integer getPercentDiscount() {
        return (int)(discount * 100);
    }

    @JsonGetter("authors")
    public String authorFullName() {
        return author.toString();
    }

    @JsonIgnore
    public List<BookReviewEntity> getReviewList() {
        List<BookReviewEntity> list = new ArrayList<>();
        for (BookRatingEntity ratingEntity : getBookRatingEntities()) {
            if (ratingEntity.getBookReviewEntity() != null) list.add(ratingEntity.getBookReviewEntity());
        }
        return list;
    }

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", pubDate=" + pubDate +
                ", author=" + author +
                ", isBestSeller=" + isBestseller +
                ", slug='" + slug + '\'' +
                ", title='" + title + '\'' +
                ", image='" + image + '\'' +
                ", description='" + description + '\'' +
                ", priceOld='" + priceOld + '\'' +
                ", discount='" + discount + '\'' +
                '}';
    }
}
